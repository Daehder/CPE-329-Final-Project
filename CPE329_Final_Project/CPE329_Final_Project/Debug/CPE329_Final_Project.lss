
CPE329_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000032a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  0000032a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003e9  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001fb  00000000  00000000  0000081d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a4  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00000cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000264  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000229  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000012a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_3>
  10:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_4>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6d 00 	call	0xda	; 0xda <main>
  88:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_GPIO>:

#include "helper_functions.h"

// initializes the GPIO
void init_GPIO(){
	DDRD &= ~(1<<HALLE0);	// Hall effects are inputs
  90:	57 98       	cbi	0x0a, 7	; 10
	DDRB |= (1<<LED13);		// LED at pin 13 is output (debug LED)
  92:	25 9a       	sbi	0x04, 5	; 4
	
	PORTD |= (1<<HALLE0);	// hall effect 1 internal pulled up 	
  94:	5f 9a       	sbi	0x0b, 7	; 11
	PORTD |= (1<<HALLE1);	// hall effect 1 internal pulled up 	
  96:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD |= (1<<HALLE2);	// hall effect 1 internal pulled up 	
  98:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD |= (1<<HALLE3);	// hall effect 1 internal pulled up
  9a:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD |= (1<<HALLE4);	// hall effect 1 internal pulled up
  9c:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD |= (1<<HALLE5);	// hall effect 1 internal pulled up
  9e:	5a 9a       	sbi	0x0b, 2	; 11
  a0:	08 95       	ret

000000a2 <init_timers>:
// initialize timers
void init_timers(){
	// timer 0 (bit)
	
	// timer 1 (16it timer)
	TCCR1A = 0x00;			// normal mode (overflow at 0xFFFF)
  a2:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1<<CS10);		// no clock pre-scaler
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<TOIE1);	// mask to view 
  ac:	80 93 6f 00 	sts	0x006F, r24
	TIFR1 = (1<<TOV1);		// enable Interrupts when TCNT overflows
  b0:	86 bb       	out	0x16, r24	; 22
  b2:	08 95       	ret

000000b4 <init_I2C>:
void init_variables(){
	
}

// initialize I2C communication
void init_I2C(){
  b4:	08 95       	ret

000000b6 <tcnt1_to_us>:
	return !(PIND & (1<<sensor));
}

// return the time in us remaining in TCNT1
uint16_t tcnt1_to_us(){
	return ( (TCNT1 * 1000000) / F_CPU);
  b6:	a0 91 84 00 	lds	r26, 0x0084
  ba:	b0 91 85 00 	lds	r27, 0x0085
  be:	20 e4       	ldi	r18, 0x40	; 64
  c0:	32 e4       	ldi	r19, 0x42	; 66
  c2:	4f e0       	ldi	r20, 0x0F	; 15
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	0e 94 1d 01 	call	0x23a	; 0x23a <__muluhisi3>
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	34 e2       	ldi	r19, 0x24	; 36
  ce:	44 ef       	ldi	r20, 0xF4	; 244
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <__divmodsi4>
}
  d6:	c9 01       	movw	r24, r18
  d8:	08 95       	ret

000000da <main>:
volatile uint32_t hall_dt = 0;		// time between hall effect readings (us)
volatile uint32_t hall_dt_last = 0;	// previous hall_dt reading

int main(void)
{
	init_GPIO();
  da:	0e 94 48 00 	call	0x90	; 0x90 <init_GPIO>
	init_timers();
  de:	0e 94 51 00 	call	0xa2	; 0xa2 <init_timers>
	init_I2C();
  e2:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_I2C>
	sei();
  e6:	78 94       	sei
	//hall_dl = (circumference_mm(WHL_DIAM_UM) / NUM_HALLS);
	
    // stuck here forever
    while (1){		
	
    }
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <main+0xe>

000000ea <__vector_4>:
}

//////////////////////////////////ISR//////////////////////////////////////////

// PCINT1_vect and PCINT2_vect use the same ISR, PCINT0_vect
ISR_ALIAS(PCINT1_vect, PCINT0_vect);
  ea:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_3>

000000ee <__vector_5>:
ISR_ALIAS(PCINT2_vect, PCINT0_vect);
  ee:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_3>

000000f2 <__vector_13>:

// enter ISR when timer1 overflows in normal mode (4096 us ~ 244Hz)
ISR(TIMER1_OVF_vect){
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	af 93       	push	r26
 102:	bf 93       	push	r27
	// time between reading increases by 4096us
	hall_dt += 4096;
 104:	80 91 04 01 	lds	r24, 0x0104
 108:	90 91 05 01 	lds	r25, 0x0105
 10c:	a0 91 06 01 	lds	r26, 0x0106
 110:	b0 91 07 01 	lds	r27, 0x0107
 114:	90 5f       	subi	r25, 0xF0	; 240
 116:	af 4f       	sbci	r26, 0xFF	; 255
 118:	bf 4f       	sbci	r27, 0xFF	; 255
 11a:	80 93 04 01 	sts	0x0104, r24
 11e:	90 93 05 01 	sts	0x0105, r25
 122:	a0 93 06 01 	sts	0x0106, r26
 126:	b0 93 07 01 	sts	0x0107, r27
}
 12a:	bf 91       	pop	r27
 12c:	af 91       	pop	r26
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <__vector_3>:

// enter ISR whenever a hall effect sensor is read
ISR(PCINT0_vect){
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	4f 93       	push	r20
 14c:	5f 93       	push	r21
 14e:	6f 93       	push	r22
 150:	7f 93       	push	r23
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
	hall_dt = (hall_dt + tcnt1_to_us());				// add remaining tcnt1 time to hall_dt
 15e:	0e 94 5b 00 	call	0xb6	; 0xb6 <tcnt1_to_us>
 162:	40 91 04 01 	lds	r20, 0x0104
 166:	50 91 05 01 	lds	r21, 0x0105
 16a:	60 91 06 01 	lds	r22, 0x0106
 16e:	70 91 07 01 	lds	r23, 0x0107
 172:	48 0f       	add	r20, r24
 174:	59 1f       	adc	r21, r25
 176:	61 1d       	adc	r22, r1
 178:	71 1d       	adc	r23, r1
 17a:	40 93 04 01 	sts	0x0104, r20
 17e:	50 93 05 01 	sts	0x0105, r21
 182:	60 93 06 01 	sts	0x0106, r22
 186:	70 93 07 01 	sts	0x0107, r23
	
	// bike is slowing down
	if(hall_dt > hall_dt_last){
 18a:	80 91 04 01 	lds	r24, 0x0104
 18e:	90 91 05 01 	lds	r25, 0x0105
 192:	a0 91 06 01 	lds	r26, 0x0106
 196:	b0 91 07 01 	lds	r27, 0x0107
 19a:	80 91 00 01 	lds	r24, 0x0100
 19e:	90 91 01 01 	lds	r25, 0x0101
 1a2:	a0 91 02 01 	lds	r26, 0x0102
 1a6:	b0 91 03 01 	lds	r27, 0x0103
		// decrease / maintain brightness
		
	}
	
	// update time variables
	hall_dt_last = hall_dt;		// update last hall reading time
 1aa:	80 91 04 01 	lds	r24, 0x0104
 1ae:	90 91 05 01 	lds	r25, 0x0105
 1b2:	a0 91 06 01 	lds	r26, 0x0106
 1b6:	b0 91 07 01 	lds	r27, 0x0107
 1ba:	80 93 00 01 	sts	0x0100, r24
 1be:	90 93 01 01 	sts	0x0101, r25
 1c2:	a0 93 02 01 	sts	0x0102, r26
 1c6:	b0 93 03 01 	sts	0x0103, r27
	hall_dt = 0;				// reset hall effect reading time interval 
 1ca:	10 92 04 01 	sts	0x0104, r1
 1ce:	10 92 05 01 	sts	0x0105, r1
 1d2:	10 92 06 01 	sts	0x0106, r1
 1d6:	10 92 07 01 	sts	0x0107, r1
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <__divmodsi4>:
 1fc:	05 2e       	mov	r0, r21
 1fe:	97 fb       	bst	r25, 7
 200:	1e f4       	brtc	.+6      	; 0x208 <__divmodsi4+0xc>
 202:	00 94       	com	r0
 204:	0e 94 15 01 	call	0x22a	; 0x22a <__negsi2>
 208:	57 fd       	sbrc	r21, 7
 20a:	07 d0       	rcall	.+14     	; 0x21a <__divmodsi4_neg2>
 20c:	0e 94 28 01 	call	0x250	; 0x250 <__udivmodsi4>
 210:	07 fc       	sbrc	r0, 7
 212:	03 d0       	rcall	.+6      	; 0x21a <__divmodsi4_neg2>
 214:	4e f4       	brtc	.+18     	; 0x228 <__divmodsi4_exit>
 216:	0c 94 15 01 	jmp	0x22a	; 0x22a <__negsi2>

0000021a <__divmodsi4_neg2>:
 21a:	50 95       	com	r21
 21c:	40 95       	com	r20
 21e:	30 95       	com	r19
 220:	21 95       	neg	r18
 222:	3f 4f       	sbci	r19, 0xFF	; 255
 224:	4f 4f       	sbci	r20, 0xFF	; 255
 226:	5f 4f       	sbci	r21, 0xFF	; 255

00000228 <__divmodsi4_exit>:
 228:	08 95       	ret

0000022a <__negsi2>:
 22a:	90 95       	com	r25
 22c:	80 95       	com	r24
 22e:	70 95       	com	r23
 230:	61 95       	neg	r22
 232:	7f 4f       	sbci	r23, 0xFF	; 255
 234:	8f 4f       	sbci	r24, 0xFF	; 255
 236:	9f 4f       	sbci	r25, 0xFF	; 255
 238:	08 95       	ret

0000023a <__muluhisi3>:
 23a:	0e 94 4a 01 	call	0x294	; 0x294 <__umulhisi3>
 23e:	a5 9f       	mul	r26, r21
 240:	90 0d       	add	r25, r0
 242:	b4 9f       	mul	r27, r20
 244:	90 0d       	add	r25, r0
 246:	a4 9f       	mul	r26, r20
 248:	80 0d       	add	r24, r0
 24a:	91 1d       	adc	r25, r1
 24c:	11 24       	eor	r1, r1
 24e:	08 95       	ret

00000250 <__udivmodsi4>:
 250:	a1 e2       	ldi	r26, 0x21	; 33
 252:	1a 2e       	mov	r1, r26
 254:	aa 1b       	sub	r26, r26
 256:	bb 1b       	sub	r27, r27
 258:	fd 01       	movw	r30, r26
 25a:	0d c0       	rjmp	.+26     	; 0x276 <__udivmodsi4_ep>

0000025c <__udivmodsi4_loop>:
 25c:	aa 1f       	adc	r26, r26
 25e:	bb 1f       	adc	r27, r27
 260:	ee 1f       	adc	r30, r30
 262:	ff 1f       	adc	r31, r31
 264:	a2 17       	cp	r26, r18
 266:	b3 07       	cpc	r27, r19
 268:	e4 07       	cpc	r30, r20
 26a:	f5 07       	cpc	r31, r21
 26c:	20 f0       	brcs	.+8      	; 0x276 <__udivmodsi4_ep>
 26e:	a2 1b       	sub	r26, r18
 270:	b3 0b       	sbc	r27, r19
 272:	e4 0b       	sbc	r30, r20
 274:	f5 0b       	sbc	r31, r21

00000276 <__udivmodsi4_ep>:
 276:	66 1f       	adc	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	88 1f       	adc	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	1a 94       	dec	r1
 280:	69 f7       	brne	.-38     	; 0x25c <__udivmodsi4_loop>
 282:	60 95       	com	r22
 284:	70 95       	com	r23
 286:	80 95       	com	r24
 288:	90 95       	com	r25
 28a:	9b 01       	movw	r18, r22
 28c:	ac 01       	movw	r20, r24
 28e:	bd 01       	movw	r22, r26
 290:	cf 01       	movw	r24, r30
 292:	08 95       	ret

00000294 <__umulhisi3>:
 294:	a2 9f       	mul	r26, r18
 296:	b0 01       	movw	r22, r0
 298:	b3 9f       	mul	r27, r19
 29a:	c0 01       	movw	r24, r0
 29c:	a3 9f       	mul	r26, r19
 29e:	70 0d       	add	r23, r0
 2a0:	81 1d       	adc	r24, r1
 2a2:	11 24       	eor	r1, r1
 2a4:	91 1d       	adc	r25, r1
 2a6:	b2 9f       	mul	r27, r18
 2a8:	70 0d       	add	r23, r0
 2aa:	81 1d       	adc	r24, r1
 2ac:	11 24       	eor	r1, r1
 2ae:	91 1d       	adc	r25, r1
 2b0:	08 95       	ret

000002b2 <_exit>:
 2b2:	f8 94       	cli

000002b4 <__stop_program>:
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <__stop_program>
