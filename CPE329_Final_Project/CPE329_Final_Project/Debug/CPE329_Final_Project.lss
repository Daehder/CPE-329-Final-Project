
CPE329_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002ff  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000019f  00000000  00000000  000004ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023b  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000008cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020f  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fb  00000000  00000000  00000b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00000c7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_GPIO>:

#include "helper_functions.h"

// intiializes the GPIO
void init_GPIO(){
	DDRD &= ~(1<<HALLE1);	// Hall effects are inputs
  80:	57 98       	cbi	0x0a, 7	; 10
	DDRB |= (1<<LED13);		// LED at pin 13 is output (debug LED)
  82:	25 9a       	sbi	0x04, 5	; 4
	
	PORTD |= (1<<HALLE1);	// hall effect 1 internal pulled up 	
  84:	5f 9a       	sbi	0x0b, 7	; 11
  86:	08 95       	ret

00000088 <check_halls>:
}


// returns logic level of given hall effect sensor  
uint8_t check_halls(uint8_t sensor){
	return !(PIND & (1<<sensor));
  88:	29 b1       	in	r18, 0x09	; 9
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	a9 01       	movw	r20, r18
  8e:	02 c0       	rjmp	.+4      	; 0x94 <check_halls+0xc>
  90:	55 95       	asr	r21
  92:	47 95       	ror	r20
  94:	8a 95       	dec	r24
  96:	e2 f7       	brpl	.-8      	; 0x90 <check_halls+0x8>
  98:	ca 01       	movw	r24, r20
  9a:	51 e0       	ldi	r21, 0x01	; 1
  9c:	85 27       	eor	r24, r21
}
  9e:	81 70       	andi	r24, 0x01	; 1
  a0:	08 95       	ret

000000a2 <main>:

#include "helper_functions.h"

int main(void)
{
	init_GPIO();		// initialize
  a2:	0e 94 40 00 	call	0x80	; 0x80 <init_GPIO>
	
    // stuck here forever
    while (1){
		if(check_halls(HALLE1))
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	0e 94 44 00 	call	0x88	; 0x88 <check_halls>
  ac:	88 23       	and	r24, r24
  ae:	11 f0       	breq	.+4      	; 0xb4 <main+0x12>
			PORTB |= (1<<LED13);
  b0:	2d 9a       	sbi	0x05, 5	; 5
  b2:	f9 cf       	rjmp	.-14     	; 0xa6 <main+0x4>
		else
			PORTB &= ~(1<<LED13);
  b4:	2d 98       	cbi	0x05, 5	; 5
  b6:	f7 cf       	rjmp	.-18     	; 0xa6 <main+0x4>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
