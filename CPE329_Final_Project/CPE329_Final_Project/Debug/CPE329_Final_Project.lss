
CPE329_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  00000382  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000917  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000049e  00000000  00000000  00000df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048c  00000000  00000000  00001291  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00001720  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000306  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000695  00000000  00000000  00001c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000229f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 31       	cpi	r26, 0x18	; 24
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  88:	0c 94 85 01 	jmp	0x30a	; 0x30a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_GPIO>:

#include "helper_functions.h"

// initializes the GPIO
void init_GPIO(){
	DDRD &= ~(1<<HALLE0);	// Hall effects are inputs
  90:	57 98       	cbi	0x0a, 7	; 10
	//DDRB |= (1<<LED13);		// LED at pin 13 is output (debug LED)
	DDRD |= (1<<GSCLK);
  92:	56 9a       	sbi	0x0a, 6	; 10
	
	PORTD |= (1<<HALLE0);	// hall effect 1 internal pulled up 	
  94:	5f 9a       	sbi	0x0b, 7	; 11
	PORTD |= (1<<HALLE1);	// hall effect 1 internal pulled up 	
  96:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD |= (1<<HALLE2);	// hall effect 1 internal pulled up 	
  98:	5d 9a       	sbi	0x0b, 5	; 11
  9a:	08 95       	ret

0000009c <init_timers>:
}

// initialize timers
void init_timers(){
	// timer 0 (8bit)
	TCCR0A = 0b10100011; 	//timer set to fast pwm
  9c:	83 ea       	ldi	r24, 0xA3	; 163
  9e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 1; 			//timer clk = system clk / 1;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	85 bd       	out	0x25, r24	; 37
							//outputs 16E6/1/255 = 62.5kHz 
	OCR0A = 128; 			//compare value => 50% duty cycle to PD6
  a4:	90 e8       	ldi	r25, 0x80	; 128
  a6:	97 bd       	out	0x27, r25	; 39

	
	// timer 1 (16it timer)
	TCCR1A = 0x00;			// normal mode (overflow at 0xFFFF)
  a8:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1<<CS10);		// no clock pre-scaler
  ac:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<TOIE1);	// mask to view 
  b0:	80 93 6f 00 	sts	0x006F, r24
	TIFR1 = (1<<TOV1);		// enable Interrupts when TCNT overflows
  b4:	86 bb       	out	0x16, r24	; 22
  b6:	08 95       	ret

000000b8 <main>:
volatile uint16_t hall_dl = 0;		// distance between halls
volatile uint32_t hall_dt = 0;		// time between hall effect readings (us)
volatile uint32_t hall_dt_last = 0;	// previous hall_dt reading

int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	00 d0       	rcall	.+0      	; 0xbe <main+0x6>
  be:	00 d0       	rcall	.+0      	; 0xc0 <main+0x8>
  c0:	00 d0       	rcall	.+0      	; 0xc2 <main+0xa>
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
	init_GPIO();
  c6:	0e 94 48 00 	call	0x90	; 0x90 <init_GPIO>
	init_timers();
  ca:	0e 94 4e 00 	call	0x9c	; 0x9c <init_timers>
	initRGB();
  ce:	0e 94 17 01 	call	0x22e	; 0x22e <initRGB>
	setAllDC(63);
  d2:	8f e3       	ldi	r24, 0x3F	; 63
  d4:	0e 94 92 00 	call	0x124	; 0x124 <setAllDC>
	color red ={4095, 0, 0};
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	48 2f       	mov	r20, r24
  dc:	1c 82       	std	Y+4, r1	; 0x04
  de:	1b 82       	std	Y+3, r1	; 0x03
  e0:	1e 82       	std	Y+6, r1	; 0x06
  e2:	1d 82       	std	Y+5, r1	; 0x05
	//sei();
	//hall_dl = (circumference_mm(WHL_DIAM_UM) / NUM_HALLS);
	
	sendLED(red, 0);
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	5f e0       	ldi	r21, 0x0F	; 15
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	7c 81       	ldd	r23, Y+4	; 0x04
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	9e 81       	ldd	r25, Y+6	; 0x06
  f2:	0e 94 3f 01 	call	0x27e	; 0x27e <sendLED>
	
    // stuck here forever
    while(1){		
	
    }
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <main+0x3e>

000000f8 <PORTB_pulse>:
*/
#include "helper_functions.h"

// pulses a pin up and back down
void PORTB_pulse(uint8_t pin){
	PORTB |= (1<<pin);		// set pin high
  f8:	45 b1       	in	r20, 0x05	; 5
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	b9 01       	movw	r22, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <PORTB_pulse+0xe>
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
 106:	8a 95       	dec	r24
 108:	e2 f7       	brpl	.-8      	; 0x102 <PORTB_pulse+0xa>
 10a:	cb 01       	movw	r24, r22
 10c:	46 2b       	or	r20, r22
 10e:	45 b9       	out	0x05, r20	; 5
	PORTB &= ~(1<<pin);		// set pin low
 110:	95 b1       	in	r25, 0x05	; 5
 112:	80 95       	com	r24
 114:	89 23       	and	r24, r25
 116:	85 b9       	out	0x05, r24	; 5
 118:	08 95       	ret

0000011a <trans_SPI>:
}

// sends 1 byte of data over SPI 
void trans_SPI(uint8_t SPI_byte){
	SPDR = SPI_byte; 			 	// starts transmission
 11a:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF))); 	// wait for transmission complete
 11c:	0d b4       	in	r0, 0x2d	; 45
 11e:	07 fe       	sbrs	r0, 7
 120:	fd cf       	rjmp	.-6      	; 0x11c <trans_SPI+0x2>
}
 122:	08 95       	ret

00000124 <setAllDC>:

// sets he DC value for every channel for 1+ TLC chip(s)
void setAllDC(uint8_t value){
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	80 34       	cpi	r24, 0x40	; 64
 12e:	08 f0       	brcs	.+2      	; 0x132 <setAllDC+0xe>
 130:	8f e3       	ldi	r24, 0x3F	; 63
	// make sure your set value is valid
	if(value>63)
		value = 63;
	
    PORTB |= (1<<MODE);			// set mode high (DC mode)
 132:	2a 9a       	sbi	0x05, 2	; 5

	// set up 6bit to 8bit pattern to fill SPDR
    uint8_t firstByte = value << 2 | value >> 4;
 134:	28 2f       	mov	r18, r24
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	a9 01       	movw	r20, r18
 13a:	44 0f       	add	r20, r20
 13c:	55 1f       	adc	r21, r21
 13e:	44 0f       	add	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	08 2f       	mov	r16, r24
 144:	02 95       	swap	r16
 146:	0f 70       	andi	r16, 0x0F	; 15
 148:	04 2b       	or	r16, r20
    uint8_t secondByte = value << 4 | value >> 2;
 14a:	a9 01       	movw	r20, r18
 14c:	42 95       	swap	r20
 14e:	52 95       	swap	r21
 150:	50 7f       	andi	r21, 0xF0	; 240
 152:	54 27       	eor	r21, r20
 154:	40 7f       	andi	r20, 0xF0	; 240
 156:	54 27       	eor	r21, r20
 158:	18 2f       	mov	r17, r24
 15a:	16 95       	lsr	r17
 15c:	16 95       	lsr	r17
 15e:	14 2b       	or	r17, r20
    uint8_t thirdByte = value << 6 | value;
 160:	00 24       	eor	r0, r0
 162:	36 95       	lsr	r19
 164:	27 95       	ror	r18
 166:	07 94       	ror	r0
 168:	36 95       	lsr	r19
 16a:	27 95       	ror	r18
 16c:	07 94       	ror	r0
 16e:	32 2f       	mov	r19, r18
 170:	20 2d       	mov	r18, r0
 172:	d8 2f       	mov	r29, r24
 174:	d2 2b       	or	r29, r18
 176:	c4 e0       	ldi	r28, 0x04	; 4

	// send 8bit bytes through SPI SPDR
    for (uint8_t i = 0; i < (TLC_NUM*12 - 1); i += 3) {
        trans_SPI(firstByte);
 178:	80 2f       	mov	r24, r16
 17a:	0e 94 8d 00 	call	0x11a	; 0x11a <trans_SPI>
        trans_SPI(secondByte);
 17e:	81 2f       	mov	r24, r17
 180:	0e 94 8d 00 	call	0x11a	; 0x11a <trans_SPI>
        trans_SPI(thirdByte);
 184:	8d 2f       	mov	r24, r29
 186:	0e 94 8d 00 	call	0x11a	; 0x11a <trans_SPI>
 18a:	c1 50       	subi	r28, 0x01	; 1
    uint8_t firstByte = value << 2 | value >> 4;
    uint8_t secondByte = value << 4 | value >> 2;
    uint8_t thirdByte = value << 6 | value;

	// send 8bit bytes through SPI SPDR
    for (uint8_t i = 0; i < (TLC_NUM*12 - 1); i += 3) {
 18c:	a9 f7       	brne	.-22     	; 0x178 <setAllDC+0x54>
        trans_SPI(firstByte);
        trans_SPI(secondByte);
        trans_SPI(thirdByte);
    }
	
	PORTB_pulse(XLAT);			// pulse XLAT pin 	
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	0e 94 7c 00 	call	0xf8	; 0xf8 <PORTB_pulse>

	PORTB &= ~(1<<MODE);		// set mode high (GS mode)
 194:	2a 98       	cbi	0x05, 2	; 5
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	08 95       	ret

000001a0 <gsConvert>:
void sendByte(unsigned char);

unsigned char shiftReg[NUM_BYTES];

void gsConvert(int data, int led) {
   int ndx = (led * 12) / 8;
 1a0:	9b 01       	movw	r18, r22
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	62 0f       	add	r22, r18
 1a8:	73 1f       	adc	r23, r19
 1aa:	66 0f       	add	r22, r22
 1ac:	77 1f       	adc	r23, r23
 1ae:	66 0f       	add	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	9b 01       	movw	r18, r22
 1b4:	77 23       	and	r23, r23
 1b6:	14 f4       	brge	.+4      	; 0x1bc <gsConvert+0x1c>
 1b8:	29 5f       	subi	r18, 0xF9	; 249
 1ba:	3f 4f       	sbci	r19, 0xFF	; 255
 1bc:	35 95       	asr	r19
 1be:	27 95       	ror	r18
 1c0:	35 95       	asr	r19
 1c2:	27 95       	ror	r18
 1c4:	35 95       	asr	r19
 1c6:	27 95       	ror	r18
   int offset = (led * 12) % 8;
 1c8:	67 70       	andi	r22, 0x07	; 7
 1ca:	70 78       	andi	r23, 0x80	; 128
 1cc:	77 23       	and	r23, r23
 1ce:	34 f4       	brge	.+12     	; 0x1dc <gsConvert+0x3c>
 1d0:	61 50       	subi	r22, 0x01	; 1
 1d2:	71 09       	sbc	r23, r1
 1d4:	68 6f       	ori	r22, 0xF8	; 248
 1d6:	7f 6f       	ori	r23, 0xFF	; 255
 1d8:	6f 5f       	subi	r22, 0xFF	; 255
 1da:	7f 4f       	sbci	r23, 0xFF	; 255
   int mask = BYTE_MASK >> offset;
 1dc:	4f ef       	ldi	r20, 0xFF	; 255
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	06 2e       	mov	r0, r22
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <gsConvert+0x48>
 1e4:	55 95       	asr	r21
 1e6:	47 95       	ror	r20
 1e8:	0a 94       	dec	r0
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <gsConvert+0x44>
   
   shiftReg[ndx] = ((data & mask) << offset);
 1ec:	d9 01       	movw	r26, r18
 1ee:	a0 50       	subi	r26, 0x00	; 0
 1f0:	bf 4f       	sbci	r27, 0xFF	; 255
 1f2:	fa 01       	movw	r30, r20
 1f4:	e8 23       	and	r30, r24
 1f6:	f9 23       	and	r31, r25
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <gsConvert+0x5c>
 1fa:	ee 0f       	add	r30, r30
 1fc:	6a 95       	dec	r22
 1fe:	ea f7       	brpl	.-6      	; 0x1fa <gsConvert+0x5a>
 200:	ec 93       	st	X, r30
   
   if(mask == NIBBLE_MASK) {
 202:	4f 30       	cpi	r20, 0x0F	; 15
 204:	51 05       	cpc	r21, r1
 206:	21 f0       	breq	.+8      	; 0x210 <gsConvert+0x70>
      mask = BYTE_MASK;
      offset = 0;
   }
   else {
      mask = NIBBLE_MASK;
 208:	6f e0       	ldi	r22, 0x0F	; 15
 20a:	70 e0       	ldi	r23, 0x00	; 0
      offset = 4;
 20c:	44 e0       	ldi	r20, 0x04	; 4
 20e:	03 c0       	rjmp	.+6      	; 0x216 <gsConvert+0x76>
   int mask = BYTE_MASK >> offset;
   
   shiftReg[ndx] = ((data & mask) << offset);
   
   if(mask == NIBBLE_MASK) {
      mask = BYTE_MASK;
 210:	6f ef       	ldi	r22, 0xFF	; 255
 212:	70 e0       	ldi	r23, 0x00	; 0
      offset = 0;
 214:	40 e0       	ldi	r20, 0x00	; 0
   else {
      mask = NIBBLE_MASK;
      offset = 4;
   }
   
   shiftReg[++ndx] = ((data & mask) << offset);
 216:	f9 01       	movw	r30, r18
 218:	e0 50       	subi	r30, 0x00	; 0
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	86 23       	and	r24, r22
 21e:	97 23       	and	r25, r23
 220:	02 c0       	rjmp	.+4      	; 0x226 <gsConvert+0x86>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	4a 95       	dec	r20
 228:	e2 f7       	brpl	.-8      	; 0x222 <gsConvert+0x82>
 22a:	81 83       	std	Z+1, r24	; 0x01
 22c:	08 95       	ret

0000022e <initRGB>:
}

/* Sets up the TWI registers to prepare for transmission */
void initRGB() {
   DDRB |= (1<<MOSI)|(1<<SCLK);
 22e:	84 b1       	in	r24, 0x04	; 4
 230:	88 62       	ori	r24, 0x28	; 40
 232:	84 b9       	out	0x04, r24	; 4
   SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 234:	81 e5       	ldi	r24, 0x51	; 81
 236:	8c bd       	out	0x2c, r24	; 44
 238:	e0 e0       	ldi	r30, 0x00	; 0
 23a:	f1 e0       	ldi	r31, 0x01	; 1
 23c:	88 e1       	ldi	r24, 0x18	; 24
 23e:	91 e0       	ldi	r25, 0x01	; 1
   
   for(int i=0; i<(TLC_NUM*24); i++){
	   shiftReg[i] = 0;
 240:	11 92       	st	Z+, r1
/* Sets up the TWI registers to prepare for transmission */
void initRGB() {
   DDRB |= (1<<MOSI)|(1<<SCLK);
   SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
   
   for(int i=0; i<(TLC_NUM*24); i++){
 242:	e8 17       	cp	r30, r24
 244:	f9 07       	cpc	r31, r25
 246:	e1 f7       	brne	.-8      	; 0x240 <initRGB+0x12>
	   shiftReg[i] = 0;
   }

}
 248:	08 95       	ret

0000024a <sendByte>:
	PORTB &= ~(1<<XLAT);
}

void sendByte(unsigned char data) {  
   /* Start transmission */
   SPDR = data;
 24a:	8e bd       	out	0x2e, r24	; 46
   /* Wait for transmission complete */
   while(!(SPSR & (1<<SPIF))) {
 24c:	0d b4       	in	r0, 0x2d	; 45
 24e:	07 fe       	sbrs	r0, 7
 250:	fd cf       	rjmp	.-6      	; 0x24c <sendByte+0x2>
   }
 252:	08 95       	ret

00000254 <updateLEDs>:
   updateLEDs();
   
   return 0;
}

void updateLEDs() {
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	c8 e1       	ldi	r28, 0x18	; 24
 25e:	d1 e0       	ldi	r29, 0x01	; 1
 260:	00 e0       	ldi	r16, 0x00	; 0
 262:	11 e0       	ldi	r17, 0x01	; 1
   int ndx;
   
   for (ndx = NUM_BYTES-1; ndx >= 0; ndx--)
      sendByte(shiftReg[ndx]);
 264:	8a 91       	ld	r24, -Y
 266:	0e 94 25 01 	call	0x24a	; 0x24a <sendByte>
}

void updateLEDs() {
   int ndx;
   
   for (ndx = NUM_BYTES-1; ndx >= 0; ndx--)
 26a:	c0 17       	cp	r28, r16
 26c:	d1 07       	cpc	r29, r17
 26e:	d1 f7       	brne	.-12     	; 0x264 <updateLEDs+0x10>
      sendByte(shiftReg[ndx]);
	  
	PORTB |= (1<<XLAT);
 270:	2b 9a       	sbi	0x05, 3	; 5
	PORTB &= ~(1<<XLAT);
 272:	2b 98       	cbi	0x05, 3	; 5
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <sendLED>:
   }

}

/* Sets LED number led to color clr */
int sendLED(color clr, int led) {
 27e:	cf 92       	push	r12
 280:	df 92       	push	r13
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	00 d0       	rcall	.+0      	; 0x290 <sendLED+0x12>
 290:	00 d0       	rcall	.+0      	; 0x292 <sendLED+0x14>
 292:	00 d0       	rcall	.+0      	; 0x294 <sendLED+0x16>
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	49 83       	std	Y+1, r20	; 0x01
 29a:	5a 83       	std	Y+2, r21	; 0x02
 29c:	6b 83       	std	Y+3, r22	; 0x03
 29e:	7c 83       	std	Y+4, r23	; 0x04
 2a0:	8d 83       	std	Y+5, r24	; 0x05
 2a2:	9e 83       	std	Y+6, r25	; 0x06
   int rVal = clr.r;
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	9a 81       	ldd	r25, Y+2	; 0x02
   int gVal = clr.g;
 2a8:	cb 80       	ldd	r12, Y+3	; 0x03
 2aa:	dc 80       	ldd	r13, Y+4	; 0x04
   int bVal = clr.b;
 2ac:	ed 80       	ldd	r14, Y+5	; 0x05
 2ae:	fe 80       	ldd	r15, Y+6	; 0x06
   
   if (led > 4 || led < 0) {
 2b0:	25 30       	cpi	r18, 0x05	; 5
 2b2:	31 05       	cpc	r19, r1
 2b4:	c8 f4       	brcc	.+50     	; 0x2e8 <sendLED+0x6a>
      return -2;  // LED is out of range
   }
   
   led *= 3;
 2b6:	89 01       	movw	r16, r18
 2b8:	00 0f       	add	r16, r16
 2ba:	11 1f       	adc	r17, r17
 2bc:	02 0f       	add	r16, r18
 2be:	13 1f       	adc	r17, r19
   
   gsConvert(rVal, led);
 2c0:	b8 01       	movw	r22, r16
 2c2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <gsConvert>
   gsConvert(gVal, ++led);
 2c6:	b8 01       	movw	r22, r16
 2c8:	6f 5f       	subi	r22, 0xFF	; 255
 2ca:	7f 4f       	sbci	r23, 0xFF	; 255
 2cc:	c6 01       	movw	r24, r12
 2ce:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <gsConvert>
   gsConvert(bVal, ++led);
 2d2:	b8 01       	movw	r22, r16
 2d4:	6e 5f       	subi	r22, 0xFE	; 254
 2d6:	7f 4f       	sbci	r23, 0xFF	; 255
 2d8:	c7 01       	movw	r24, r14
 2da:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <gsConvert>
   
   updateLEDs();
 2de:	0e 94 2a 01 	call	0x254	; 0x254 <updateLEDs>
   
   return 0;
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <sendLED+0x6e>
   int rVal = clr.r;
   int gVal = clr.g;
   int bVal = clr.b;
   
   if (led > 4 || led < 0) {
      return -2;  // LED is out of range
 2e8:	8e ef       	ldi	r24, 0xFE	; 254
 2ea:	9f ef       	ldi	r25, 0xFF	; 255
   gsConvert(bVal, ++led);
   
   updateLEDs();
   
   return 0;
}
 2ec:	26 96       	adiw	r28, 0x06	; 6
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	f8 94       	cli
 2f2:	de bf       	out	0x3e, r29	; 62
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	cd bf       	out	0x3d, r28	; 61
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	ff 90       	pop	r15
 302:	ef 90       	pop	r14
 304:	df 90       	pop	r13
 306:	cf 90       	pop	r12
 308:	08 95       	ret

0000030a <_exit>:
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
