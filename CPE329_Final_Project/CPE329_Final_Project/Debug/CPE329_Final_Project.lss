
CPE329_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  00000272  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008eb  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004ca  00000000  00000000  00000cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000490  00000000  00000000  00001181  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00001614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000306  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000631  00000000  00000000  00001aee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000211f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 31       	cpi	r26, 0x18	; 24
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  88:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_GPIO>:

#include "helper_functions.h"

// initializes the GPIO
void init_GPIO(){
	DDRD &= ~(1<<HALLE0);	// Hall effects are inputs
  90:	57 98       	cbi	0x0a, 7	; 10
	//DDRB |= (1<<LED13);		// LED at pin 13 is output (debug LED)
	DDRD |= (1<<GSCLK);
  92:	53 9a       	sbi	0x0a, 3	; 10
	
	PORTD |= (1<<HALLE0);	// hall effect 1 internal pulled up 	
  94:	5f 9a       	sbi	0x0b, 7	; 11
	PORTD |= (1<<HALLE1);	// hall effect 1 internal pulled up 	
  96:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD |= (1<<HALLE2);	// hall effect 1 internal pulled up 	
  98:	5d 9a       	sbi	0x0b, 5	; 11
  9a:	08 95       	ret

0000009c <init_timers>:
// initialize timers
void init_timers(){
	// timer 0 (8bit)
		
	// timer 1 (16it timer)
	TCCR1A = 0x00;			// normal mode (overflow at 0xFFFF)
  9c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1<<CS10);		// no clock pre-scaler
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<TOIE1);	// mask to view 
  a6:	80 93 6f 00 	sts	0x006F, r24
	TIFR1 = (1<<TOV1);		// enable Interrupts when TCNT overflows
  aa:	86 bb       	out	0x16, r24	; 22
	
	// timer 2 (8 bit)
	TCCR2A = _BV(COM2B1)	// set on BOTTOM, clear on OCR2A (non-inverting) output on OC2B
  ac:	83 e2       	ldi	r24, 0x23	; 35
  ae:	80 93 b0 00 	sts	0x00B0, r24
			| _BV(WGM21)	// Fast pwm with OCR2A top
			| _BV(WGM20);	// Fast pwm with OCR2A top
	TCCR2B = _BV(WGM22);	// Fast pwm with OCR2A top
  b2:	e1 eb       	ldi	r30, 0xB1	; 177
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	88 e0       	ldi	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
	OCR2B = 0;			// duty factor (as short a pulse as possible)
  ba:	10 92 b4 00 	sts	0x00B4, r1
	OCR2A = 3;				// see tlc_config.h
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	80 93 b3 00 	sts	0x00B3, r24
	TCCR2B |= _BV(CS20);	// no prescale, (start pwm output)
  c4:	80 81       	ld	r24, Z
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <main>:
volatile uint32_t hall_dt = 0;		// time between hall effect readings (us)
volatile uint32_t hall_dt_last = 0;	// previous hall_dt reading

int main(void)
{
	init_GPIO();
  cc:	0e 94 48 00 	call	0x90	; 0x90 <init_GPIO>
	init_timers();
  d0:	0e 94 4e 00 	call	0x9c	; 0x9c <init_timers>
	initRGB();
  d4:	0e 94 ef 00 	call	0x1de	; 0x1de <initRGB>
	setAllDC(63);
  d8:	8f e3       	ldi	r24, 0x3F	; 63
  da:	0e 94 8b 00 	call	0x116	; 0x116 <setAllDC>
	color red ={0xFFF, 0xFFF, 0xFFF};
	//sei();
	//hall_dl = (circumference_mm(WHL_DIAM_UM) / NUM_HALLS);
	
	PORTD |= (1<<BLANK);
  de:	5c 9a       	sbi	0x0b, 4	; 11
	
	//sendLED(red, 0);
	//sendLED(red, 1);
	//sendLED(red, 3);
	//sendLED(red, 4);
	setAllGS(0xFFF);
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	9f e0       	ldi	r25, 0x0F	; 15
  e4:	0e 94 c9 00 	call	0x192	; 0x192 <setAllGS>
	
    // stuck here forever
    while(1){
    }
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <main+0x1c>

000000ea <PORTB_pulse>:
*/
#include "helper_functions.h"

// pulses a pin up and back down
void PORTB_pulse(uint8_t pin){
	PORTB |= (1<<pin);		// set pin high
  ea:	45 b1       	in	r20, 0x05	; 5
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	b9 01       	movw	r22, r18
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <PORTB_pulse+0xe>
  f4:	66 0f       	add	r22, r22
  f6:	77 1f       	adc	r23, r23
  f8:	8a 95       	dec	r24
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <PORTB_pulse+0xa>
  fc:	cb 01       	movw	r24, r22
  fe:	46 2b       	or	r20, r22
 100:	45 b9       	out	0x05, r20	; 5
	PORTB &= ~(1<<pin);		// set pin low
 102:	95 b1       	in	r25, 0x05	; 5
 104:	80 95       	com	r24
 106:	89 23       	and	r24, r25
 108:	85 b9       	out	0x05, r24	; 5
 10a:	08 95       	ret

0000010c <trans_SPI>:
}

// sends 1 byte of data over SPI 
void trans_SPI(uint8_t SPI_byte){
	SPDR = SPI_byte; 			 	// starts transmission
 10c:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF))); 	// wait for transmission complete
 10e:	0d b4       	in	r0, 0x2d	; 45
 110:	07 fe       	sbrs	r0, 7
 112:	fd cf       	rjmp	.-6      	; 0x10e <trans_SPI+0x2>
}
 114:	08 95       	ret

00000116 <setAllDC>:

// sets he DC value for every channel for 1+ TLC chip(s)
void setAllDC(uint8_t value){
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	80 34       	cpi	r24, 0x40	; 64
 120:	08 f0       	brcs	.+2      	; 0x124 <setAllDC+0xe>
 122:	8f e3       	ldi	r24, 0x3F	; 63
	// make sure your set value is valid
	if(value>63)
		value = 63;
	
    PORTB |= (1<<MODE);			// set mode high (DC mode)
 124:	2a 9a       	sbi	0x05, 2	; 5

	// set up 6bit to 8bit pattern to fill SPDR
    uint8_t firstByte = value << 2 | value >> 4;
 126:	28 2f       	mov	r18, r24
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	a9 01       	movw	r20, r18
 12c:	44 0f       	add	r20, r20
 12e:	55 1f       	adc	r21, r21
 130:	44 0f       	add	r20, r20
 132:	55 1f       	adc	r21, r21
 134:	08 2f       	mov	r16, r24
 136:	02 95       	swap	r16
 138:	0f 70       	andi	r16, 0x0F	; 15
 13a:	04 2b       	or	r16, r20
    uint8_t secondByte = value << 4 | value >> 2;
 13c:	a9 01       	movw	r20, r18
 13e:	42 95       	swap	r20
 140:	52 95       	swap	r21
 142:	50 7f       	andi	r21, 0xF0	; 240
 144:	54 27       	eor	r21, r20
 146:	40 7f       	andi	r20, 0xF0	; 240
 148:	54 27       	eor	r21, r20
 14a:	18 2f       	mov	r17, r24
 14c:	16 95       	lsr	r17
 14e:	16 95       	lsr	r17
 150:	14 2b       	or	r17, r20
    uint8_t thirdByte = value << 6 | value;
 152:	00 24       	eor	r0, r0
 154:	36 95       	lsr	r19
 156:	27 95       	ror	r18
 158:	07 94       	ror	r0
 15a:	36 95       	lsr	r19
 15c:	27 95       	ror	r18
 15e:	07 94       	ror	r0
 160:	32 2f       	mov	r19, r18
 162:	20 2d       	mov	r18, r0
 164:	d8 2f       	mov	r29, r24
 166:	d2 2b       	or	r29, r18
 168:	c4 e0       	ldi	r28, 0x04	; 4

	// send 8bit bytes through SPI SPDR
    for (uint8_t i = 0; i < (TLC_NUM*12 - 1); i += 3) {
        trans_SPI(firstByte);
 16a:	80 2f       	mov	r24, r16
 16c:	0e 94 86 00 	call	0x10c	; 0x10c <trans_SPI>
        trans_SPI(secondByte);
 170:	81 2f       	mov	r24, r17
 172:	0e 94 86 00 	call	0x10c	; 0x10c <trans_SPI>
        trans_SPI(thirdByte);
 176:	8d 2f       	mov	r24, r29
 178:	0e 94 86 00 	call	0x10c	; 0x10c <trans_SPI>
 17c:	c1 50       	subi	r28, 0x01	; 1
    uint8_t firstByte = value << 2 | value >> 4;
    uint8_t secondByte = value << 4 | value >> 2;
    uint8_t thirdByte = value << 6 | value;

	// send 8bit bytes through SPI SPDR
    for (uint8_t i = 0; i < (TLC_NUM*12 - 1); i += 3) {
 17e:	a9 f7       	brne	.-22     	; 0x16a <setAllDC+0x54>
        trans_SPI(firstByte);
        trans_SPI(secondByte);
        trans_SPI(thirdByte);
    }
	
	PORTB_pulse(XLAT);			// pulse XLAT pin 	
 180:	86 e0       	ldi	r24, 0x06	; 6
 182:	0e 94 75 00 	call	0xea	; 0xea <PORTB_pulse>

	PORTB &= ~(1<<MODE);		// set mode high (GS mode)
 186:	2a 98       	cbi	0x05, 2	; 5
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	08 95       	ret

00000192 <setAllGS>:

// sends the GS data to the TLC chip over SPI
// XLAT needs to be added here
void setAllGS(uint16_t value){
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	81 15       	cp	r24, r1
 19a:	20 e1       	ldi	r18, 0x10	; 16
 19c:	92 07       	cpc	r25, r18
 19e:	10 f0       	brcs	.+4      	; 0x1a4 <setAllGS+0x12>
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	9f e0       	ldi	r25, 0x0F	; 15
	// make sure you value is valid
	if(value>4095)
		value = 4095;
	
	PORTB &= ~(1<<MODE);		// set mode low (GS mode)
 1a4:	2a 98       	cbi	0x05, 2	; 5
	
	// set up 12 bit to 8 bit pattern to fill SPDR
	uint8_t firstByte = (value >> 4);
 1a6:	9c 01       	movw	r18, r24
 1a8:	32 95       	swap	r19
 1aa:	22 95       	swap	r18
 1ac:	2f 70       	andi	r18, 0x0F	; 15
 1ae:	23 27       	eor	r18, r19
 1b0:	3f 70       	andi	r19, 0x0F	; 15
 1b2:	23 27       	eor	r18, r19
 1b4:	12 2f       	mov	r17, r18
	uint8_t secondByte = (value << 4) | (value >> 8);
 1b6:	d8 2f       	mov	r29, r24
 1b8:	d2 95       	swap	r29
 1ba:	d0 7f       	andi	r29, 0xF0	; 240
 1bc:	d9 2b       	or	r29, r25
 1be:	c7 e1       	ldi	r28, 0x17	; 23
	
	// send each byte into the SPDR
	// needs XLAT between every 12 bits
	for(uint8_t i = 0; i<(TLC_NUM*24 - 1); i++){
		trans_SPI(firstByte);	
 1c0:	81 2f       	mov	r24, r17
 1c2:	0e 94 86 00 	call	0x10c	; 0x10c <trans_SPI>
		trans_SPI(secondByte);
 1c6:	8d 2f       	mov	r24, r29
 1c8:	0e 94 86 00 	call	0x10c	; 0x10c <trans_SPI>
 1cc:	c1 50       	subi	r28, 0x01	; 1
	uint8_t firstByte = (value >> 4);
	uint8_t secondByte = (value << 4) | (value >> 8);
	
	// send each byte into the SPDR
	// needs XLAT between every 12 bits
	for(uint8_t i = 0; i<(TLC_NUM*24 - 1); i++){
 1ce:	c1 f7       	brne	.-16     	; 0x1c0 <setAllGS+0x2e>
		trans_SPI(firstByte);	
		trans_SPI(secondByte);
	}
	
	PORTB_pulse(XLAT);			// pulse XLAT pin
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	0e 94 75 00 	call	0xea	; 0xea <PORTB_pulse>
	
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	08 95       	ret

000001de <initRGB>:
   shiftReg[ndx] |= ((data >> offset & mask));
}

/* Sets up the TWI registers to prepare for transmission */
void initRGB() {
   DDRB |= (1<<MOSI)|(1<<SCLK);
 1de:	84 b1       	in	r24, 0x04	; 4
 1e0:	88 62       	ori	r24, 0x28	; 40
 1e2:	84 b9       	out	0x04, r24	; 4
   SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 1e4:	81 e5       	ldi	r24, 0x51	; 81
 1e6:	8c bd       	out	0x2c, r24	; 44
 1e8:	e0 e0       	ldi	r30, 0x00	; 0
 1ea:	f1 e0       	ldi	r31, 0x01	; 1
 1ec:	88 e1       	ldi	r24, 0x18	; 24
 1ee:	91 e0       	ldi	r25, 0x01	; 1
   
   for(int i=0; i<(TLC_NUM*24); i++){
	   shiftReg[i] = 0;
 1f0:	11 92       	st	Z+, r1
/* Sets up the TWI registers to prepare for transmission */
void initRGB() {
   DDRB |= (1<<MOSI)|(1<<SCLK);
   SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
   
   for(int i=0; i<(TLC_NUM*24); i++){
 1f2:	e8 17       	cp	r30, r24
 1f4:	f9 07       	cpc	r31, r25
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <initRGB+0x12>
	   shiftReg[i] = 0;
   }

}
 1f8:	08 95       	ret

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
