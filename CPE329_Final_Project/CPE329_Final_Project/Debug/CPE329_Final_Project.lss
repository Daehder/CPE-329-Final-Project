
CPE329_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003dd  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000022d  00000000  00000000  000005e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000265  00000000  00000000  00000816  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00000a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000025e  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000182  00000000  00000000  00000da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 56 00 	call	0xac	; 0xac <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_GPIO>:

#include "helper_functions.h"

// initializes the GPIO
void init_GPIO(){
	DDRD &= ~(1<<HALLE0);	// Hall effects are inputs
  80:	57 98       	cbi	0x0a, 7	; 10
	DDRB |= (1<<LED13);		// LED at pin 13 is output (debug LED)
  82:	25 9a       	sbi	0x04, 5	; 4
	
	PORTD |= (1<<HALLE0);	// hall effect 1 internal pulled up 	
  84:	5f 9a       	sbi	0x0b, 7	; 11
	PORTD |= (1<<HALLE1);	// hall effect 1 internal pulled up 	
  86:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD |= (1<<HALLE2);	// hall effect 1 internal pulled up 	
  88:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD |= (1<<HALLE3);	// hall effect 1 internal pulled up
  8a:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD |= (1<<HALLE4);	// hall effect 1 internal pulled up
  8c:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD |= (1<<HALLE5);	// hall effect 1 internal pulled up
  8e:	5a 9a       	sbi	0x0b, 2	; 11
  90:	08 95       	ret

00000092 <check_halls>:
	return 0;
}

// returns logic level of given hall effect sensor  
uint8_t check_halls(uint8_t sensor){
	return !(PIND & (1<<sensor));
  92:	29 b1       	in	r18, 0x09	; 9
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	a9 01       	movw	r20, r18
  98:	02 c0       	rjmp	.+4      	; 0x9e <check_halls+0xc>
  9a:	55 95       	asr	r21
  9c:	47 95       	ror	r20
  9e:	8a 95       	dec	r24
  a0:	e2 f7       	brpl	.-8      	; 0x9a <check_halls+0x8>
  a2:	ca 01       	movw	r24, r20
  a4:	51 e0       	ldi	r21, 0x01	; 1
  a6:	85 27       	eor	r24, r21
}
  a8:	81 70       	andi	r24, 0x01	; 1
  aa:	08 95       	ret

000000ac <main>:

#include "helper_functions.h"

int main(void)
{
	init_GPIO();		// initialize
  ac:	0e 94 40 00 	call	0x80	; 0x80 <init_GPIO>
		
		color color1;
		
		color1.r = 10; 
		
		if(check_halls(HALLE1))
  b0:	86 e0       	ldi	r24, 0x06	; 6
  b2:	0e 94 49 00 	call	0x92	; 0x92 <check_halls>
  b6:	88 23       	and	r24, r24
  b8:	11 f0       	breq	.+4      	; 0xbe <main+0x12>
			PORTB |= (1<<LED13);
  ba:	2d 9a       	sbi	0x05, 5	; 5
  bc:	f9 cf       	rjmp	.-14     	; 0xb0 <main+0x4>
		else
			PORTB &= ~(1<<LED13);
  be:	2d 98       	cbi	0x05, 5	; 5
  c0:	f7 cf       	rjmp	.-18     	; 0xb0 <main+0x4>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
